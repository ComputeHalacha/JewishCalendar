<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>JewishCalendar</name>
  </assembly>
  <members>
    <member name="T:JewishCalendar.DafYomi">
      <summary>
            Does the calculations for ascertaining the Daf Yomi for any Jewish date since Daf Yomi was initiated.
            Sample of use to get todays daf:
            <code>
            JewishCalendar.JewishDate jd = new JewishDate(DateTime.Now); 
            JewishCalendar.Daf dafOfDay = JewishCalendar.DafYomi.GetDafYomi(jd);
            string strDafOfDay = dafOfDay.ToStringHeb();
            </code>
            The algorithms was converted to C# (and tweaked) 
            from the C code in Danny Sadinoff's HebCal - Copyright (C) 1994.
            The HebCal code for dafyomi was adapted by Aaron Peromsik from Bob Newell's public domain daf.el.
            </summary>
    </member>
    <member name="M:JewishCalendar.DafYomi.GetDafYomi(JewishCalendar.IJewishDate)">
      <summary>
            Computes the Day Yomi for the given day.
            </summary>
      <param name="jewishDate">The Jewish date for which to get the Daf Yomi information</param>
      <returns>A Daf object containing the DafYomi information for the given day</returns>
    </member>
    <member name="T:JewishCalendar.Masechta">
      <summary>
            Represents a single Masechta in Shas.
            This structure is not meant to be instantiated directly.
            To access the DafYomi, use <see cref="M:JewishCalendar.DafYomi.GetDafYomi(JewishCalendar.IJewishDate)" /></summary>
    </member>
    <member name="F:JewishCalendar.Masechta.NameEnglish">
      <summary>
            The name of the masechta in English
            </summary>
    </member>
    <member name="F:JewishCalendar.Masechta.NameHebrew">
      <summary>
            The name of the masechta in Hebrew
            </summary>
    </member>
    <member name="F:JewishCalendar.Masechta.Dappim">
      <summary>
            The number of dappim in the current masechta
            </summary>
    </member>
    <member name="M:JewishCalendar.Masechta.#ctor(System.String,System.String,System.Int32)">
      <summary>
            Create a new Masechta
            </summary>
      <param name="eng">
      </param>
      <param name="heb">
      </param>
      <param name="dappim">
      </param>
    </member>
    <member name="T:JewishCalendar.Daf">
      <summary>
            Represents a single Daf in Shas.
            This class is not meant to be instantiated directly.
            To access the DafYomi, use <see cref="M:JewishCalendar.DafYomi.GetDafYomi(JewishCalendar.IJewishDate)" /></summary>
    </member>
    <member name="P:JewishCalendar.Daf.Masechta">
      <summary>
            The masechta this daf is in
            </summary>
    </member>
    <member name="P:JewishCalendar.Daf.DafNumber">
      <summary>
            The number of this daf
            </summary>
    </member>
    <member name="M:JewishCalendar.Daf.#ctor(JewishCalendar.Masechta,System.Int32)">
      <summary>
            Create a new Daf object
            </summary>
      <param name="m">
      </param>
      <param name="d">
      </param>
    </member>
    <member name="M:JewishCalendar.Daf.ToString">
      <summary>
            Returns the name of the Masechta and daf number in English, For example: Sukkah, Daf 3
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Daf.ToStringHeb">
      <summary>
            Returns the name of the Masechta and daf number in Hebrew. For example: 'סוכה דף כ.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.HourMinute">
      <summary>
            A simpler Time Span. Represents just the hour and the minute.
            Explicitly cast-able to and from System.TimeSpan.
            </summary>
    </member>
    <member name="F:JewishCalendar.HourMinute.Hour">
      <summary>
            The hour
            </summary>
    </member>
    <member name="F:JewishCalendar.HourMinute.Minute">
      <summary>
            The minute
            </summary>
    </member>
    <member name="M:JewishCalendar.HourMinute.ToTimeSpan">
      <summary>
            Returns a TimeSpan representation of this HourMinute
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:JewishCalendar.HourMinute.NoValue">
      <summary>
            An HourMinute that does not represent a real time.
            Use in the place of null or empty etc.
            Note: very different from TimeSpan.Zero which represents "zero hour" or midnight.
            </summary>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Addition(JewishCalendar.HourMinute,System.Int32)">
      <summary>
            Add minutes
            </summary>
      <param name="t">
      </param>
      <param name="min">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Addition(JewishCalendar.HourMinute,JewishCalendar.HourMinute)">
      <summary>
            Add the number of hours and minutes in the given HourMinute to the current HourMinute
            </summary>
      <param name="t1">
      </param>
      <param name="t2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Addition(JewishCalendar.HourMinute,System.TimeSpan)">
      <summary>
            Add a TimeSpan to this HourMinute
            </summary>
      <param name="t">
      </param>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Subtraction(JewishCalendar.HourMinute,System.Int32)">
      <summary>
            Subtract minutes.
            </summary>
      <param name="t">
      </param>
      <param name="min">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Subtraction(JewishCalendar.HourMinute,JewishCalendar.HourMinute)">
      <summary>
            Subtract the number of hours and minutes in the given HourMinute from the current HourMinute
            </summary>
      <param name="t1">
      </param>
      <param name="t2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Subtraction(JewishCalendar.HourMinute,System.TimeSpan)">
      <summary>
            Subtract a TimeSpan from this HourMinute
            </summary>
      <param name="t">
      </param>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Equality(JewishCalendar.HourMinute,JewishCalendar.HourMinute)">
      <summary>
            Compares 2 HourMinute objects
            </summary>
      <param name="t1">
      </param>
      <param name="t2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Inequality(JewishCalendar.HourMinute,JewishCalendar.HourMinute)">
      <summary>
            Compares 2 HourMinute objects for inequality
            </summary>
      <param name="t1">
      </param>
      <param name="t2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Equality(JewishCalendar.HourMinute,System.TimeSpan)">
      <summary>
            Compare the current HourMinute to a System.TimeSpan
            </summary>
      <param name="t1">
      </param>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Inequality(JewishCalendar.HourMinute,System.TimeSpan)">
      <summary>
            Compare the current HourMinute to a System.TimeSpan for inequality
            </summary>
      <param name="t1">
      </param>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_GreaterThan(JewishCalendar.HourMinute,JewishCalendar.HourMinute)">
      <summary>
            Returns true if the current HourMinute is after the second one.
            </summary>
      <param name="t1">
      </param>
      <param name="t2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_LessThan(JewishCalendar.HourMinute,JewishCalendar.HourMinute)">
      <summary>
            Returns true if the current HourMinute is before the second one.
            </summary>
      <param name="t1">
      </param>
      <param name="t2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_GreaterThan(JewishCalendar.HourMinute,System.TimeSpan)">
      <summary>
            Returns true if the current HourMinute is after the TimeSpan.
            </summary>
      <param name="t1">
      </param>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_GreaterThanOrEqual(JewishCalendar.HourMinute,JewishCalendar.HourMinute)">
      <summary>
            Returns true if the current HourMinute is not before the second one.
            </summary>
      <param name="t1">
      </param>
      <param name="t2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_LessThanOrEqual(JewishCalendar.HourMinute,JewishCalendar.HourMinute)">
      <summary>
            Returns true if the current HourMinute is not after the second one.
            </summary>
      <param name="t1">
      </param>
      <param name="t2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_GreaterThanOrEqual(JewishCalendar.HourMinute,System.TimeSpan)">
      <summary>
            Returns true if the current HourMinute is not before the TimeSpan.
            </summary>
      <param name="t1">
      </param>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_LessThanOrEqual(JewishCalendar.HourMinute,System.TimeSpan)">
      <summary>
            Returns true if the current HourMinute is not after the TimeSpan.
            </summary>
      <param name="t1">
      </param>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_LessThan(JewishCalendar.HourMinute,System.TimeSpan)">
      <summary>
            Returns true if the current HourMinute is before the TimeSpan.
            </summary>
      <param name="t1">
      </param>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Explicit(JewishCalendar.HourMinute)~System.TimeSpan">
      <summary>
            Explicitly convert (cast) an HourMinute into a TimeSpan.
            </summary>
      <param name="hm">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.op_Explicit(System.TimeSpan)~JewishCalendar.HourMinute">
      <summary>
            Explicitly convert (cast) a TimeSpan into an HourMinute
            </summary>
      <param name="ts">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:JewishCalendar.HourMinute.TotalMinutes">
      <summary>
            The total number of minutes represented by this HourMinute (includes the hours)
            </summary>
    </member>
    <member name="M:JewishCalendar.HourMinute.ToString">
      <summary>
            The hour and minute displayed in the format: h:MM tt
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.ToString24H">
      <summary>
            Returns the current time in the format HH:mm
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.Equals(System.Object)">
      <summary>
            Tests 2 HourMinute objects for equality.
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.HourMinute.GetHashCode">
      <summary>
            Returns the hashcode for this instance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.IJewishDate">
      <summary>
            Interface for the Jewish Date classes
            </summary>
    </member>
    <member name="P:JewishCalendar.IJewishDate.Day">
      <summary>
            The Day in the month for this Jewish Date.
            NOTE: If location was not supplied in the constructor the Jewish Day may not be correct
            as from nightfall until midnight should really be the next Jewish day.
            </summary>
    </member>
    <member name="P:JewishCalendar.IJewishDate.Month">
      <summary>
            The Jewish Month. As in the Torah, Nissan is month 1
            </summary>
    </member>
    <member name="P:JewishCalendar.IJewishDate.Year">
      <summary>
            The number of years since creation
            </summary>
    </member>
    <member name="P:JewishCalendar.IJewishDate.AbsoluteDate">
      <summary>
            The number of days elapsed since the theoretical Gregorian date Sunday, December 31, 1 BCE.
            Since there is no year 0 in the calendar, the year following 1 BCE is 1 CE.
            So, the Gregorian date January 1, 1 CE is absolute date number 1.
            </summary>
    </member>
    <member name="P:JewishCalendar.IJewishDate.DayOfWeek">
      <summary>
            The day of the week for this Jewish Date
            </summary>
    </member>
    <member name="P:JewishCalendar.IJewishDate.GregorianDate">
      <summary>
            The secular date on this Jewish Date
            </summary>
    </member>
    <member name="P:JewishCalendar.IJewishDate.MonthName">
      <summary>
            The name of the current Jewish Month (in English)
            </summary>
    </member>
    <member name="M:JewishCalendar.IJewishDate.ToLongDateString">
      <summary>
            Returns the Jewish date in the format: The 14th day of Adar, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.IJewishDate.DateDiffMonth(JewishCalendar.IJewishDate)">
      <summary>
            Gets the difference in months between two JewishDates
            If the second date is before this one, the number will be negative.
            </summary>
      <param name="jd">
      </param>
      <returns>
      </returns>
      <remarks>Ignores Day part. For example, from 29 Kislev to 1 Teves will 
            return 1 even though they are only a day or two apart</remarks>
    </member>
    <member name="M:JewishCalendar.IJewishDate.AddMonths(System.Int32)">
      <summary>
            Adds the given number of months to the current date and returns the new Jewish Date
            </summary>
      <param name="months">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.IJewishDate.AddYears(System.Int32)">
      <summary>
            Adds the given number of years to the current date and returns the new Jewish Date
            </summary>
      <param name="years">
      </param>
      <returns>
      </returns>
      <remarks>If the current month is Adar Sheini and the new year is not a leap year, the month is set to Adar.
            If the current Day is the 30th of Cheshvan or Kislev and in the new year that month only has 29 days, 
            the day is set to the 1st of the following month.
            </remarks>
    </member>
    <member name="M:JewishCalendar.IJewishDate.GetDayOfOmer">
      <summary>
            Returns the day of the Omer for this Jewish date. If it is not during Sefirah, 0 is returned
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.IJewishDate.ToShortDateString">
      <summary>
            Returns the Jewish date in the format: Adar 14, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.IJewishDate.ToLongDateStringHeb">
      <summary>
            Returns the Jewish date in the format: יום חמישי כ"ט תשרי תשע"ה
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.IJewishDate.ToShortDateStringHeb">
      <summary>
            Returns the Jewish date in the format: כ"ו אלול תשע"ה
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.IJewishDate.ToString">
      <summary>
            Returns the Jewish date in the format: Adar 14, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.JewishDate">
      <summary>
             Represents a single day in the Jewish calendar - Month are Nissan based.
             </summary>
      <remarks>The regular .NET class System.Globalization.HebrewCalendar has Tishrei as month #1.
             This becomes confusing, as months after Adar get a different number -
             depending on whether the year is a leap year or not.
             The Torah also instructs us to call Nissan the first month. (See Ramban in drasha for Rosh Hashana)
             Hence this "Nissan first" Jewish Date class -
             with all the underlying logic based on System.Globalization.HebrewCalendar (which was found to be very efficient).
             This class cannot be used with the .NET micro framework as it does not have access to System.Globalization.HebrewCalendar.
             To use this project with the .NET Micro Framework, you will need to remove this file before compiling.
            
             This class differs from the System.DateTime structure in that it does not directly have a time of day component. 
             The GregorianDate property can be used to keep track of the time of day.
             The AddMonths, and AddYears, addition and subtraction operator functions all preserve the time of day of the original GregorianDate.
             </remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.#ctor">
      <summary>
            Empty constructor. Sets the date to the current system date.
            </summary>
    </member>
    <member name="M:JewishCalendar.JewishDate.#ctor(JewishCalendar.Location)">
      <summary>
            Get the current Jewish date in the given location. Cut-off time is sunset.
            </summary>
      <param name="location">The location. This will be used to determine the time of sunset.</param>
    </member>
    <member name="M:JewishCalendar.JewishDate.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new JewishDate object with the specified Jewish year, Jewish month and Jewish day
            </summary>
      <param name="year">The year - counted from the creation of the world</param>
      <param name="month">The Jewish month. As it is in the Torah, Nissan is 1.</param>
      <param name="day">The day of the month</param>
    </member>
    <member name="M:JewishCalendar.JewishDate.#ctor(System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>
            Creates a new JewishDate object with the specified Jewish year, Jewish month and Jewish day and time of day
            </summary>
      <param name="year">The year - counted from the creation of the world</param>
      <param name="month">The Jewish month. As it is in the Torah, Nissan is 1.</param>
      <param name="day">The day of the month</param>
      <param name="timeOfDay">
      </param>
    </member>
    <member name="M:JewishCalendar.JewishDate.#ctor(System.DateTime)">
      <summary>
            Creates a Jewish date that corresponds to the given Gregorian date
            Note: as the location is not specified here, we cannot determine what time shkia is.
            So if the given time is after shkia, the Jewish date will be a Jewish Day early.
            </summary>
      <param name="dateTime">The Gregorian date from which to create the Jewish Date</param>
    </member>
    <member name="M:JewishCalendar.JewishDate.#ctor(System.DateTime,JewishCalendar.Location)">
      <summary>
            Creates a Jewish date that corresponds to the given Gregorian date in the given location.
            Cut-off time is sunset.
            </summary>
      <param name="date">The Gregorian date from which to create the Jewish Date</param>
      <param name="location">The location. This will be used to determine the time of sunset.</param>
    </member>
    <member name="P:JewishCalendar.JewishDate.MaxDate">
      <summary>
            The maximum supported date by this class
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDate.MinDate">
      <summary>
            The minimum valid date supported by this class
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDate.AbsoluteDate">
      <summary>
            The number of days elapsed since the theoretical Gregorian date Sunday, December 31, 1 BCE.
            Since there is no year 0 in the calendar, the year following 1 BCE is 1 CE.
            So, the Gregorian date January 1, 1 CE is absolute date number 1.
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDate.Day">
      <summary>
            The Day in the month for this Jewish Date.
            NOTE: If location was not supplied in the constructor the Jewish Day may not be correct
            as from nightfall until midnight should really be the next Jewish day.
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDate.DayOfWeek">
      <summary>
            The day of the week for this Jewish Date
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDate.GregorianDate">
      <summary>
            The secular date at midnight of this Jewish Date.
            </summary>
      <remarks>
            If the current object was constructed with a constructor that takes a "Location"
            and the DateTime used by the constructor was after sunset but before midnight,
            the GregorianDate will be a day late as a day was added by the constructor.
            This anomaly is caused by the following un-mixable elements:
                1. The correct Jewish date changes at sunset - so in Jewish, it is the next day.
                2. The JewishDate class's calculations are based on the System.Globalization.HebrewCalendar functions -
                   which use System DateTime and do not consider sunset as a factor....
                   So in order to change the Jewish Date to the next day, we need to add a day to the
                   GregorianDate property as this class's connection to the functions of
                   System.Globalization.HebrewCalendar are all through it's GregorianDate property.
            To get the correct and proper Secular Date, use the GetSecularDate(HourMinute, Location) function.
            </remarks>
    </member>
    <member name="P:JewishCalendar.JewishDate.Month">
      <summary>
            The Jewish Month. As in the Torah, Nissan is month 1
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDate.MonthName">
      <summary>
            The name of the current Jewish Month (in English)
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDate.Year">
      <summary>
            The number of years since creation
            </summary>
    </member>
    <member name="M:JewishCalendar.JewishDate.DateDiffMonth(JewishCalendar.IJewishDate)">
      <summary>
            Gets the difference in months between two JewishDates
            If the second date is before this one, the number will be negative.
            </summary>
      <param name="jd">
      </param>
      <returns>
      </returns>
      <remarks>Ignores Day part. For example, from 29 Kislev to 1 Teves will 
            return 1 even though they are only a day or two apart</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.AddMonths(System.Int32)">
      <summary>
            Adds the given number of months to the current date and returns the new Jewish Date
            </summary>
      <param name="months">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.AddYears(System.Int32)">
      <summary>
            Adds the given number of years to the current date and returns the new Jewish Date
            </summary>
      <param name="years">
      </param>
      <returns>
      </returns>
      <remarks>If the current month is Adar Sheini and the new year is not a leap year, the month is set to Adar.
            If the current Day is the 30th of Cheshvan or Kislev and in the new year that month only has 29 days, 
            the day is set to the 1st of the following month.
            </remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.Equals(System.Object)">
      <summary>
            Compare this JewishDate to another. If the day, month and year are the same, will return true.
            </summary>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.GetDayOfOmer">
      <summary>
            Returns the day of the Omer for the given Jewish date. If the given day is not during Sefirah, 0 is returned
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.GetHashCode">
      <summary>
            Return the HashCode for this instance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.GetSecularDate(JewishCalendar.HourMinute,JewishCalendar.Location)">
      <summary>
            Returns the correct Secular Date for this JewishDate at the given Time and Location.
            </summary>
      <param name="location">
      </param>
      <param name="timeOfDay">
      </param>
      <returns>
      </returns>
      <remarks>
            When using a JewishDate constructor that takes a "Location" object,
            if the initializing DateTime was after sunset, the date was set to the next day.
            The GregorianDate property will therefore not properly reflect the true Secular date until midnight.
            This function returns the correct GregorianDate for this JewishDate at the given time and place.
            </remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.ToLongDateString">
      <summary>
            Returns the Jewish date in the format: The 14th day of Adar, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.ToLongDateStringHeb">
      <summary>
            Returns the Jewish date in the format: יום חמישי כ"ט תשרי תשע"ה
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.ToShortDateString">
      <summary>
            Returns the Jewish date in the format: Adar 14, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.ToShortDateStringHeb">
      <summary>
            Returns the Jewish date in the format: כ"ו אלול תשע"ה
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.ToString">
      <summary>
            Returns the Jewish date in the format: Adar 14, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.IsLeapYear(System.Int32)">
      <summary>
            Determines if the given Jewish Year is a Leap Year
            </summary>
      <param name="year">
      </param>
      <returns>
      </returns>
      <remarks>This function will return the same value as 
            <see cref="M:JewishCalendar.JewishDateCalculations.IsJewishLeapYear(System.Int32)">JewishDateCalculations.IsJewishLeapYear</see>,
            but internally uses System.Globalization.HebrewCalendar to retrieve its value.
            The algorithm for both functions are identical with the single difference being, that the 
            HebrewCalendar version does a check to make sure that the year is within the range of years
            that it can represent.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.IsLongCheshvan(System.Int32)">
      <summary>
            Does Cheshvan have a full 30 days in the given Jewish Year?
            </summary>
      <param name="year">
      </param>
      <returns>
      </returns>
      <remarks>This function will return the same value as 
            <see cref="M:JewishCalendar.JewishDateCalculations.IsLongCheshvan(System.Int32)">JewishDateCalculations.IsLongCheshvan</see>,
            but internally uses System.Globalization.HebrewCalendar to retrieve its value. 
            When using the JewishDate class which itself is based on System.Globalization.HebrewCalendar, 
            using the class specific version of the function is more efficient.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.IsShortKislev(System.Int32)">
      <summary>
            Does Kislev have only 29 days for the given Jewish year?
            </summary>
      <param name="year">
      </param>
      <returns>
      </returns>
      <remarks>This function will return the same value as 
            <see cref="M:JewishCalendar.JewishDateCalculations.IsShortKislev(System.Int32)">JewishDateCalculations.IsShortKislev</see>,
            but internally uses System.Globalization.HebrewCalendar to retrieve its value. 
            When using the JewishDate class which itself is based on System.Globalization.HebrewCalendar, 
            using the class specific version of the function is more efficient.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.MonthsInYear(System.Int32)">
      <summary>
            Compute the total number of months for the given Hebrew year
            </summary>
      <param name="year">
      </param>
      <returns>
      </returns>
      <remarks>This function will return the same value as 
            <see cref="M:JewishCalendar.JewishDateCalculations.MonthsInJewishYear(System.Int32)">JewishDateCalculations.MonthsInJewishYear</see>,
            but internally uses HebrewCalendar.GetMonthsInYear which in turn uses HebrewCalendar.IsLeapYear 
            to determine if the year is a leap year or not.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.DaysInJewishYear(System.Int32)">
      <summary>
            Get the total number of days in the given Jewish year
            </summary>
      <param name="year">
      </param>
      <returns>
      </returns>
      <remarks>This function will return the same value as 
            <see cref="M:JewishCalendar.JewishDateCalculations.DaysInJewishYear(System.Int32)">JewishDateCalculations.DaysInJewishYear</see>,
            but internally uses System.Globalization.HebrewCalendar to retrieve its value. 
            When using the JewishDate class which itself is based on System.Globalization.HebrewCalendar, 
            using the class specific version of the function is more efficient.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.DaysInJewishMonth(System.Int32,System.Int32)">
      <summary>
            Get the total number of days in the given Jewish Month
            </summary>
      <param name="year">
      </param>
      <param name="month">The Nissan based Jewish month</param>
      <returns>
      </returns>
      <remarks>This function will return the same value as 
            <see cref="M:JewishCalendar.JewishDateCalculations.DaysInJewishMonth(System.Int32,System.Int32)">JewishDateCalculations.DaysInJewishMonth</see>,
            but internally uses System.Globalization.HebrewCalendar to retrieve its value. 
            When using the JewishDate class which itself is based on System.Globalization.HebrewCalendar, 
            using the class specific version of the function is more efficient.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_Explicit(JewishCalendar.JewishDateMicro)~JewishCalendar.JewishDate">
      <summary>
            Explicitly cast a JewishDateMicro to a JewishDate
            </summary>
      <param name="jd">
      </param>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_Subtraction(JewishCalendar.JewishDate,System.Int32)">
      <summary>
            Subtract days from a Jewish date.
            </summary>
      <param name="hd">
      </param>
      <param name="days">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_Subtraction(JewishCalendar.JewishDate,JewishCalendar.JewishDate)">
      <summary>
            Gets the difference in days between two Jewish dates.
            </summary>
      <param name="hd">
      </param>
      <param name="hd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_Inequality(JewishCalendar.JewishDate,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if both objects do not have the same day, month and year
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_Addition(JewishCalendar.JewishDate,System.Int32)">
      <summary>
            Add days to a Jewish date.
            </summary>
      <param name="hd">
      </param>
      <param name="days">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_LessThan(JewishCalendar.JewishDate,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if the current JewishDate object is chronologically before the second iJewishDate object
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_LessThanOrEqual(JewishCalendar.JewishDate,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if the current JewishDate object is not chronologically later than the second iJewishDate object
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_Equality(JewishCalendar.JewishDate,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if both objects have the same day, month and year. You can also use the Equals function or the extension method IsSameDate(iJewishDate js) for the same purpose.
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_GreaterThan(JewishCalendar.JewishDate,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if the current JewishDate object is chronologically after the second iJewishDate object
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDate.op_GreaterThanOrEqual(JewishCalendar.JewishDate,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if the current JewishDate object is not chronologically earlier than the second iJewishDate object
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.JewishDateCalculations">
      <summary>
            Static class that contains functions for Jewish calendar calculations.
            </summary>
      <remarks>This class does much of the actual Jewish Date calculations for the <see cref="T:JewishCalendar.JewishDateMicro">JewishDateMicro</see> class.
            The calculations do not use System.Globalization.HebrewCalendar so they can be used with .NET micro projects.
            Most of the Jewish date logic and calculations were translated from the C code
            which in turn were translated from the Lisp code in "Calendrical Calculations" by Nachum Dershowitz and Edward M. Reingold
            in Software---Practice &amp; Experience, vol. 20, no. 9 (September, 1990), pp. 899--928.
            </remarks>
    </member>
    <member name="F:JewishCalendar.JewishDateCalculations.HEBREW_EPOCH">
      <summary>
            Absolute date of start of Jewish calendar
            </summary>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.IsJewishLeapYear(System.Int32)">
      <summary>
            Determines if the given Jewish Year is a Leap Year
            </summary>
      <param name="year">
      </param>
      <returns>True if the year is a leap year and False if not</returns>
      <remarks>This function is identical to
            <see cref="M:JewishCalendar.JewishDate.IsLeapYear(System.Int32)">JewishDate.IsLeapYear</see>.
            The only difference is, the JewishDate class's version uses Globalization.HebrewCalendars.IsLeapYear 
            which adds a check to make sure that the year is within the range of the HebrewCalendar class.
            </remarks>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.MonthsInJewishYear(System.Int32)">
      <summary>
            Gets the number of months in the given Jewish year
            </summary>
      <param name="year">The Jewish Year for which to get the number of months for</param>
      <returns>The number of months in the given year</returns>
      <remarks>If you are not using the .NET micro framework, you can also use 
            <see cref="M:JewishCalendar.JewishDate.MonthsInYear(System.Int32)">JewishDate.MonthsInYear</see>.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.IsLongCheshvan(System.Int32)">
      <summary>
            Does Cheshvan have a full 30 days in the given Jewish Year?
            </summary>
      <param name="year">The given Jewish Year</param>
      <returns>Whether or not Cheshvan has 30 days in the given year</returns>
      <remarks>If you are not using the .NET micro framework, use 
            <see cref="M:JewishCalendar.JewishDate.IsLongCheshvan(System.Int32)">JewishDate.IsLongCheshvan</see> 
            instead of this function.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.IsShortKislev(System.Int32)">
      <summary>
            Does Kislev have 29 days for the given Jewish year?
            </summary>
      <param name="year">The given Jewish Year</param>
      <returns>Whether or not Kislev has 29 days in the given year</returns>
      <remarks>If you are not using the .NET micro framework, use 
            <see cref="M:JewishCalendar.JewishDate.IsShortKislev(System.Int32)">JewishDate.IsShortKislev</see> 
            instead of this function.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.DaysInJewishMonth(System.Int32,System.Int32)">
      <summary>
            Compute the number of days in the given Jewish month
            </summary>
      <param name="year">The Jewish year</param>
      <param name="month">The Nissan based Jewish Month (Nissan is 1 and Adar Sheini is 13)</param>
      <returns>The number of days in the given Jewish Month</returns>
      <remarks>If you are not using the .NET micro framework, use 
            <see cref="M:JewishCalendar.JewishDate.DaysInJewishMonth(System.Int32,System.Int32)">JewishDate.DaysInJewishMonth</see> 
            instead of this function.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.DaysInJewishYear(System.Int32)">
      <summary>
            Get the total number of days in the given Jewish year.
            From Rosh Hashana of the given year until the next Rosh Hashana.
            </summary>
      <param name="year">The given Jewish Year</param>
      <returns>The number of days in the given Jewish Year</returns>
      <remarks>If you are not using the .NET micro framework, use 
            <see cref="M:JewishCalendar.JewishDate.DaysInJewishYear(System.Int32)">JewishDate.DaysInHebrewYear</see> 
            instead of this function.</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.IsSameDate(JewishCalendar.IJewishDate,JewishCalendar.IJewishDate)">
      <summary>
            Compares this Jewish Date to another one to see if they both represent the same Jewish calendar date.         
            </summary>
      <param name="jd1">This JewishDate</param>
      <param name="jd2">The JewishDate to test against this one</param>
      <returns>Whether or not the two represent the same Jewish calendar date</returns>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.GetAbsoluteFromJewishDate(System.Int32,System.Int32,System.Int32)">
      <summary>
            The number of days elapsed since the theoretical Gregorian date Sunday, December 31, 1 BCE.
            Since there is no year 0 in the calendar, the year following 1 BCE is 1 CE.
            So, the Gregorian date January 1, 1 CE is absolute date number 1.
            NOTE: This function should only be used if you don't have access to System.Globalization.HebrewCalendar.
            </summary>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.GetAbsoluteFromGregorianDate(System.Int32,System.Int32,System.Int32)">
      <summary>
            Computed the absolute date for the given Gregorian Year, Month and Day
            NOTE: If you are not using the .NET micro framework, do not use this function!
            Use the following instead: (int)((YOUR_DATETIME.Subtract(new DateTime(1, 1, 1)).TotalDays + 1));
            </summary>
      <param name="year">The Gregorian Year</param>
      <param name="month">The Gregorian Month</param>
      <param name="day">The Gregorian Day</param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.DaysInGregorianMonth(System.Int32,System.Int32)">
      <summary>
            Compute the number of days in the given month of the Gregorian calendar.
            NOTE: If you are not using the .NET Micro framework, do not use this function!
            Use the GregorianCalendar.GetDaysInMonth function instead
            </summary>
      <param name="month">The Gregorian Month</param>
      <param name="year">The Gregorian Year</param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateCalculations.GetElapsedDays(System.Int32)">
      <summary>
            Computes the number of days elapsed from the Sunday prior to the start of the
            Jewish calendar to the mean conjunction of Tishrei of the given Jewish year.
            </summary>
      <param name="year">The Jewish Year</param>
      <returns>The number of days elapsed</returns>
    </member>
    <member name="T:JewishCalendar.JewishDateMicro">
      <summary>
            Represents a single day in the Jewish Calendar.
            </summary>
      <remarks>
            System.Globalization.HebrewCalendar is not available in the .NET Micro Framework,
            so this class was created for use in MF projects.
            The calculations and functions used by this class's representation of the Jewish Date are based on open source algorithms.
            
            This class does not have a time of day component. 
            The GregorianDate property can not be used to keep track of the time of day as the System.DateTime object
            is generated anew for each call to the GregorianDate property and  it will always have a time of day of 12 AM.
            
            IMPORTANT NOTE: for all other projects besides for Micro Framework projects, you should use the
            JewishCalendar.JewishDate class which being based on System.Globalization.HebrewCalendar, 
            is way more efficient - in benchmark testing we found it to be up to 20% quicker than this class.
            
            When using the JewishCalendar dll with the .NET Micro Framework, the following items needs to be removed before compiling:
                 1. The entire file "JewishDate.cs"
                 2. The following line in "Utils.cs": public static HebrewCalendar HebrewCalendar = new HebrewCalendar();
                 3. The following line in "Utils.cs": HebrewCultureInfo.DateTimeFormat.Calendar = HebrewCalendar;
            </remarks>
    </member>
    <member name="P:JewishCalendar.JewishDateMicro.AbsoluteDate">
      <summary>
            The number of days elapsed since the theoretical Gregorian date Sunday, December 31, 1 BCE.
            Since there is no year 0 in the calendar, the year following 1 BCE is 1 CE.
            So, the Gregorian date January 1, 1 CE is absolute date number 1.
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDateMicro.Day">
      <summary>
            The Day in the month for this Jewish Date.
            NOTE: Not always correct; from nightfall until midnight should really be the next Jewish day.
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDateMicro.DayInWeek">
      <summary>
            The index of the day of the week for this Jewish Date. Sunday is 0.
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDateMicro.DayOfWeek">
      <summary>
            The day of the week for this Jewish Date (from Midnight to Midnight)
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDateMicro.Month">
      <summary>
            The Jewish Month. As in the Torah, Nissan is month 1
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDateMicro.MonthName">
      <summary>
            The name of the current Jewish Month (in English)
            </summary>
    </member>
    <member name="P:JewishCalendar.JewishDateMicro.Year">
      <summary>
            The number of years since creation
            </summary>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.#ctor">
      <summary>
            Empty constructor. Sets the date to the current system date.
            </summary>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.#ctor(JewishCalendar.Location)">
      <summary>
            Get the current Jewish date in the given location. Cut-off time is sunset.
            </summary>
      <param name="location">The location. This will be used to determine the time of sunset.</param>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new JewishDate with the specified Hebrew year, month, day and absolute day.
            This is the quickest constructor as it does no calculations at all. 
            Caution: If the absolute day doesn't correctly match the given year/month/day, weird things will happen.
            </summary>
      <param name="year">The year - counted from the creation of the world</param>
      <param name="month">The Jewish month. As it is in the Torah, Nissan is 1.</param>
      <param name="day">The day of the month</param>
      <param name="absoluteDay">The "absolute day"</param>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new JewishDate with the specified Hebrew year, month and day
            </summary>
      <param name="year">The year - counted from the creation of the world</param>
      <param name="month">The Jewish month. As it is in the Torah, Nissan is 1.</param>
      <param name="day">The day of the month</param>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.#ctor(System.DateTime)">
      <summary>
            Creates a Jewish date that corresponds to the given Gregorian date
            </summary>
      <param name="date">The Gregorian date from which to create the Jewish Date</param>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.#ctor(System.DateTime,JewishCalendar.Location)">
      <summary>
            Creates a Jewish date that corresponds to the given Gregorian date in the given location. Cut-off time is sunset.
            </summary>
      <param name="date">The Gregorian date from which to create the Jewish Date</param>
      <param name="location">The location. This will be used to determine the time of sunset.</param>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.#ctor(System.Int32)">
      <summary>
            Creates a Hebrew date from the "absolute date".
            In other words, the Hebrew date on the day that is the given number of days after/before December 31st, 1 BCE
            </summary>
      <param name="absoluteDate">The number of days elapsed since the theoretical Gregorian date Sunday, December 31, 1 BCE.
            Since there is no year 0 in the calendar, the year following 1 BCE is 1 CE.
            So, the Gregorian date January 1, 1 CE is absolute date number 1.</param>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.SetFromAbsoluteDate(System.Int32)">
      <summary>
            Sets the current Jewish date to the date represented by the given "Absolute Date" -
            which is the number of days after/before December 31st, 1 BCE.
            The logic here was translated from the C code - which in turn were translated
            from the Lisp code in ''Calendrical Calculations'' by Nachum Dershowitz and Edward M. Reingold in
            Software---Practice &amp; Experience, vol. 20, no. 9 (September, 1990), pp. 899--928.
            </summary>
      <param name="absoluteDate">
      </param>
    </member>
    <member name="P:JewishCalendar.JewishDateMicro.GregorianDate">
      <summary>
            Get the Gregorian Date for the current Hebrew Date
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.Equals(System.Object)">
      <summary>
            Returns true if both objects have the same day, month and year. You can also use the == operator or the extension method IsSameDate(iJewishDate js) for the same purpose.
            </summary>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.DateDiffMonth(JewishCalendar.IJewishDate)">
      <summary>
            Gets the difference in months between two JewishDates. 
            If the second date is before this one, the number will be negative.
            </summary>
      <param name="jd">
      </param>
      <returns>
      </returns>
      <remarks>Ignores Day part. For example, from 29 Kislev to 1 Teves will 
            return 1 even though they are only a day or two apart</remarks>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.AddMonths(System.Int32)">
      <summary>
            Adds the given number of months to the current date and returns the new Jewish Date
            </summary>
      <param name="months">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.AddYears(System.Int32)">
      <summary>
            Adds the given number of years to the current date and returns the new Jewish Date
            </summary>
      <param name="years">
      </param>
      <returns>
      </returns>
      <remarks>If the current month is Adar Sheini and the new year is not a leap year, the month is set to Adar.
            If the current Day is the 30th of Cheshvan or Kislev and in the new year that month only has 29 days, 
            the day is set to the 1st of the following month.
            </remarks>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.GetDayOfOmer">
      <summary>
            Returns the day of the Omer for the given Jewish date. If the given day is not during Sefirah, 0 is returned
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.GetHashCode">
      <summary>
            Returns the HashCode for this instance
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.ToLongDateString">
      <summary>
            Returns the Jewish date in the format: The 14th day of Adar, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.ToLongDateStringHeb">
      <summary>
            Returns the Jewish date in the format: יום חמישי כ"ט תשרי תשע"ה
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.ToShortDateString">
      <summary>
            Returns the Jewish date in the format: Adar 14, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.ToShortDateStringHeb">
      <summary>
            Returns the Jewish date in the format: כ"ו אלול תשע"ה
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.ToString">
      <summary>
            Returns the Jewish date in the format: Adar 14, 5775
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_Subtraction(JewishCalendar.JewishDateMicro,System.Int32)">
      <summary>
            Subtract days from a Jewish date.
            </summary>
      <param name="hd">
      </param>
      <param name="days">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_Subtraction(JewishCalendar.JewishDateMicro,JewishCalendar.JewishDateMicro)">
      <summary>
            Gets the difference in days between two Jewish dates.
            </summary>
      <param name="hd">
      </param>
      <param name="hd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_Inequality(JewishCalendar.JewishDateMicro,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if both objects do not have the same day, month and year
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_Addition(JewishCalendar.JewishDateMicro,System.Int32)">
      <summary>
            Add days to a Jewish date.
            </summary>
      <param name="hd">
      </param>
      <param name="days">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_LessThan(JewishCalendar.JewishDateMicro,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if the current JewishDateMicro object is chronologically before the second iJewishDate object
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_LessThanOrEqual(JewishCalendar.JewishDateMicro,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if the current JewishDateMicro object is not chronologically later than the second iJewishDate object
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_Equality(JewishCalendar.JewishDateMicro,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if both objects have the same day, month and year. You can also use the Equals function or the extension method IsSameDate(iJewishDate js) for the same purpose.
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_GreaterThan(JewishCalendar.JewishDateMicro,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if the current JewishDateMicro object is chronologically after the second iJewishDate object
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.JewishDateMicro.op_GreaterThanOrEqual(JewishCalendar.JewishDateMicro,JewishCalendar.IJewishDate)">
      <summary>
            Returns true if the current JewishDateMicro object is not chronologically earlier than the second iJewishDate object
            </summary>
      <param name="jd1">
      </param>
      <param name="jd2">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.Molad">
      <summary>
            Represents the molad for a single month
            </summary>
    </member>
    <member name="P:JewishCalendar.Molad.JewishDate">
      <summary>
            The date of the molad
            </summary>
    </member>
    <member name="P:JewishCalendar.Molad.Time">
      <summary>
            Represents the time of the molad - not including the chalakim
            </summary>
    </member>
    <member name="P:JewishCalendar.Molad.Chalakim">
      <summary>
            Represents the Chalakim (1/1080 of an hour) part of the molad
            </summary>
    </member>
    <member name="M:JewishCalendar.Molad.ToString">
      <summary>
            Returns the time of the molad as a string in the format: Monday Night, 8:33 PM and 12 Chalakim
            NOTE: the cutoff time to be considered "night" is 8 PM.
            To specify another nightfall time (such as the real sunset time), use the function: ToString(HourMinute nightfall)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Molad.ToString(JewishCalendar.HourMinute)">
      <summary>
            Returns the time of the molad as a string in the format: Monday Night, 8:33 PM and 12 Chalakim
            </summary>
      <param name="nightfall">Used to determine when to display "Night" or "Motzai Shabbos" etc.</param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Molad.ToStringHeb(JewishCalendar.HourMinute)">
      <summary>
            Returns the time of the molad as a string in the format: ליל שני 20:33 12 חלקים
            </summary>
      <param name="nightfall">Used to determine when to display "ליל/יום" or "מוצאי שב"ק" etc.</param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Molad.GetMolad(System.Int32,System.Int32)">
      <summary>
            Returns the molad for the given year and month
            </summary>
      <param name="month">
      </param>
      <param name="year">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.PirkeiAvos">
      <summary>
            Gets the Pirkei Avos Perek/Prakim for any given Shabbos in the summer months.
            The rules are: the Parshiyaos, Nasso, Pinchas and Shoftim start a new cycle and the last two weeks in Ellul get double prakim.
            The calculations of this class work OK for Eretz Yisroel, but Chu"l seems to be incorrect.
            The issue is that in Chu"l, Achron Shel Pesach and the second day of Shavuos can both fall out on Shabbos.
            </summary>
    </member>
    <member name="M:JewishCalendar.PirkeiAvos.GetPirkeiAvos(JewishCalendar.IJewishDate,System.Boolean)">
      <summary>
            Returns an array of Perek number/s for the given Jewish Date and location.
            If the given day does not have Pirkei Avos, an empty array is returned.
            </summary>
      <param name="jDate">
      </param>
      <param name="inIsrael">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.Sedra">
      <summary>
            This class should not be instantiated publicly.
            It is only used internally as a container to hold the data for all the sedras of a single year.
            To get the sedra for any given date, use the public static function: "GetSedra"
            </summary>
    </member>
    <member name="F:JewishCalendar.Sedra._lastSedraCalculated">
      <summary>
             Because most consecutive calls to GetSedra will be within the same year,
             and, in order to figure out the sedra for a single day we need to calculate the entire year,
             so we save the last year calculated and use it if it is called again.
             If memory is an issue, remove the first few lines of code in the Sedra constructor
            </summary>
    </member>
    <member name="M:JewishCalendar.Sedra.GetSedra(JewishCalendar.IJewishDate,System.Boolean)">
      <summary>
            Gets the Parsha/s for the given Jewish date
            </summary>
      <param name="date">
      </param>
      <param name="inIsrael">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.Parsha">
      <summary>
            Represents a single parsha in the torah. The weekly sedra for any given week contains either one or two parshas.
            </summary>
    </member>
    <member name="M:JewishCalendar.Parsha.#ctor(System.String,System.String)">
      <summary>
            Create a new Parsha object
            </summary>
      <param name="eng">
      </param>
      <param name="heb">
      </param>
    </member>
    <member name="F:JewishCalendar.Parsha.nameEng">
      <summary>
            Name of this parsha in English
            </summary>
    </member>
    <member name="F:JewishCalendar.Parsha.nameHebrew">
      <summary>
            Name of this parsha in Hebrew
            </summary>
    </member>
    <member name="T:JewishCalendar.SpecialDayTypes">
      <summary>
            Types of special days
            </summary>
    </member>
    <member name="F:JewishCalendar.SpecialDayTypes.Shabbos">
      <summary>
            Shabbos
            </summary>
    </member>
    <member name="F:JewishCalendar.SpecialDayTypes.MajorYomTov">
      <summary>
            Major Yom Tov - where melacha is prohibited
            </summary>
    </member>
    <member name="F:JewishCalendar.SpecialDayTypes.MinorYomtov">
      <summary>
            Minor Yom Tov - where Melacha is permitted
            </summary>
    </member>
    <member name="F:JewishCalendar.SpecialDayTypes.CholHamoed">
      <summary>
            Chol Hamoed
            </summary>
    </member>
    <member name="F:JewishCalendar.SpecialDayTypes.FastDay">
      <summary>
            A fast day
            </summary>
    </member>
    <member name="F:JewishCalendar.SpecialDayTypes.Information">
      <summary>
            Extra day information
            </summary>
    </member>
    <member name="F:JewishCalendar.SpecialDayTypes.HasCandleLighting">
      <summary>
            Erev shabbos or yomtov
            </summary>
    </member>
    <member name="F:JewishCalendar.SpecialDayTypes.EruvTavshilin">
      <summary>
            Erev Yomtov - when Yomtov contains a Friday
            </summary>
    </member>
    <member name="T:JewishCalendar.SpecialDay">
      <summary>
            Represents a single special day
            </summary>
    </member>
    <member name="P:JewishCalendar.SpecialDay.DayType">
      <summary>
            Type of special day. Can have multiple values.
            </summary>
    </member>
    <member name="P:JewishCalendar.SpecialDay.NameEnglish">
      <summary>
            Name of this special day in English
            </summary>
    </member>
    <member name="P:JewishCalendar.SpecialDay.NameHebrew">
      <summary>
            Name of this special day in Hebrew
            </summary>
    </member>
    <member name="M:JewishCalendar.SpecialDay.#ctor(System.String,System.String,JewishCalendar.SpecialDayTypes)">
      <summary>
            Create a new SpecialDay instance.
            </summary>
      <param name="nameEnglish">
      </param>
      <param name="nameHebrew">
      </param>
      <param name="dayTypes">
      </param>
    </member>
    <member name="M:JewishCalendar.SpecialDay.#ctor(System.String,System.String)">
      <summary>
            Create a new SpecialDay of DayType SpecialDayTypes.Information.
            </summary>
      <param name="nameEnglish">
      </param>
      <param name="nameHebrew">
      </param>
    </member>
    <member name="M:JewishCalendar.SpecialDay.ToString">
      <summary>
            Returns the name of this special day in English.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.Zmanim">
      <summary>
            Computes the daily Zmanim and Yomim Tovim for a single Jewish date.
            </summary>
      <remarks>Most of the astronomical mathematical calculations were directly adapted from the excellent
            Jewish calendar calculation in C# Copyright © by Ulrich and Ziporah Greve (2005)</remarks>
    </member>
    <member name="P:JewishCalendar.Zmanim.Location">
      <summary>
            The Location to cheshbon the zmanim for
            </summary>
    </member>
    <member name="P:JewishCalendar.Zmanim.SecularDate">
      <summary>
            Zmanim are by the secular date
            </summary>
    </member>
    <member name="M:JewishCalendar.Zmanim.#ctor(System.DateTime,JewishCalendar.Location)">
      <summary>
            Create a new Zmanim instance for the given secular day and Location
            </summary>
      <param name="d">
      </param>
      <param name="loc">
      </param>
    </member>
    <member name="M:JewishCalendar.Zmanim.#ctor(JewishCalendar.IJewishDate,JewishCalendar.Location)">
      <summary>
            Create a new Zmanim instance for the given Jewish day and Location
            </summary>
      <param name="hd">
      </param>
      <param name="loc">
      </param>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetChatzos">
      <summary>
            Gets chatzos of both day and night for current location.
            Configured from netz to shkia at sea level
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetNetz">
      <summary>
            Gets sunrise for current location  (at the locations altitude)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetNetzShkia(System.Boolean)">
      <summary>
            Gets an array of two HourMinute structures. The first is the time of Netz for the current date and location and the second is the time of shkia.
            </summary>
      <param name="considerElevation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetShaaZmanis(System.Int32)">
      <summary>
            Gets length of Shaa zmanis in minutes for current location.
            Configured from netz to shkia at sea level.
            </summary>
      <param name="offset">Number of minutes before/after shkia/netz to cheshbon</param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetShkia">
      <summary>
            Gets sunset for current location  (at the locations altitude)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetChatzos(System.DateTime,JewishCalendar.Location)">
      <summary>
            Gets chatzos of both day and night for given date and location.
            Configured from netz to shkia at sea level
            </summary>
      <param name="date">
      </param>
      <param name="location">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetHolidays(JewishCalendar.IJewishDate,System.Boolean)">
      <summary>
            Gets a list of special days and information about the given Jewish Date
            </summary>
      <param name="jDate">
      </param>
      <param name="inIsrael">
      </param>
      <returns>
      </returns>
      <remarks>We use an ArrayList rather than a generic List to accommodate
            the .NET Micro framework which does not support generic lists.
            For regular projects just use as follows: GetHolidays(jDate, inIsrael).Cast&lt;JewishCalendar.SpecialDay&gt;()
            </remarks>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetHolidaysText(JewishCalendar.SpecialDay[],System.String,System.Boolean)">
      <summary>
             Gets a dash delimited list of holidays for the given Jewish Day
             </summary>
      <param name="holidayList">
      </param>
      <param name="delimiter">
      </param>
      <param name="hebrew">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetHolidaysText(JewishCalendar.IJewishDate,System.Boolean,System.Boolean)">
      <summary>
            Gets a dash delimited list of holidays for the given Jewish Day
            </summary>
      <param name="jdate">
      </param>
      <param name="inIsrael">
      </param>
      <param name="hebrew">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetHolidaysText(System.Collections.ArrayList,System.String,System.Boolean)">
      <summary>
             Gets a dash delimited list of holidays for the given Jewish Day
             </summary>
      <param name="holidayList">
      </param>
      <param name="delimiter">
      </param>
      <param name="hebrew">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetNetz(System.DateTime,JewishCalendar.Location,System.Boolean)">
      <summary>
            Get time of sunrise for the given location and date
            </summary>
      <param name="date">
      </param>
      <param name="location">
      </param>
      <param name="considerElevation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetShaaZmanis(System.DateTime,JewishCalendar.Location,System.Int32)">
      <summary>
            Gets length of Shaa zmanis in minutes for given date and location.
            Configured from netz to shkia at sea level.
            </summary>
      <param name="date">
      </param>
      <param name="location">
      </param>
      <param name="offset">Number of minutes before/after shkia/netz to cheshbon</param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetShkia(System.DateTime,JewishCalendar.Location,System.Boolean)">
      <summary>
            Get time of sunset for the given location and date
            </summary>
      <param name="date">
      </param>
      <param name="location">
      </param>
      <param name="considerElevation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Zmanim.GetNetzShkia(System.DateTime,JewishCalendar.Location,System.Boolean)">
      <summary>
            Gets an array of two HourMinute structures.
            The first is the time of sunrise for the given date and location and the second is the time of sunset.
            </summary>
      <param name="date">
      </param>
      <param name="location">
      </param>
      <param name="considerElevation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.Location">
      <summary>
            Represents a place or location. Used for calculating the zmanim.
            </summary>
    </member>
    <member name="T:JewishCalendar.Location.LatitudeTypes">
      <summary>
            Latitude type
            </summary>
    </member>
    <member name="F:JewishCalendar.Location.LatitudeTypes.North">
      <summary>
            North of the equator
            </summary>
    </member>
    <member name="F:JewishCalendar.Location.LatitudeTypes.South">
      <summary>
            South of the equator
            </summary>
    </member>
    <member name="T:JewishCalendar.Location.LongitudeTypes">
      <summary>
            Longitude type
            </summary>
    </member>
    <member name="F:JewishCalendar.Location.LongitudeTypes.East">
      <summary>
            East of Greenwich England
            </summary>
    </member>
    <member name="F:JewishCalendar.Location.LongitudeTypes.West">
      <summary>
            West of Greenwich England
            </summary>
    </member>
    <member name="M:JewishCalendar.Location.#ctor">
      <summary>
            Empty constructor
            </summary>
    </member>
    <member name="M:JewishCalendar.Location.#ctor(System.String,System.Int32,System.Double,System.Double)">
      <summary>
            Create a new location.
            </summary>
      <param name="name">
      </param>
      <param name="timeZone">
      </param>
      <param name="latitude">
      </param>
      <param name="longitute">
      </param>
    </member>
    <member name="P:JewishCalendar.Location.Name">
      <summary>
            The english name for this place
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.NameHebrew">
      <summary>
            The name of this place in Hebrew
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.IsInIsrael">
      <summary>
            Is this location in Israel?
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.LatitudeDegrees">
      <summary>
            Number of latitude degrees
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.LatitudeMinutes">
      <summary>
            Number of latitude minutes
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.LatitudeType">
      <summary>
            Is this place above or below the equator?
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.LongitudeDegrees">
      <summary>
            Number of longitude degrees
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.LongitudeMinutes">
      <summary>
            Number of longitude minutes
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.LongitudeType">
      <summary>
            Is this east or West of Greenwich England
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.TimeZone">
      <summary>
            Time zone in relation to GMT
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.TimeZoneName">
      <summary>
            Needed for figuring out date of transition to DST.
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.TimeZoneInfo">
      <summary>
            Needed for figuring out date of transition to DST.
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.Elevation">
      <summary>
            Elevation of this location in meters
            </summary>
    </member>
    <member name="P:JewishCalendar.Location.CandleLighting">
      <summary>
            Number of minutes before sunset is candle lighting.
            The default for this is, in Israel 30 minutes and in Chutz La'aretz 18 minutes.
            </summary>
    </member>
    <member name="M:JewishCalendar.Location.ToString">
      <summary>
            Returns the name of this Location in English.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:JewishCalendar.Utils">
      <summary>
            Contains general static arrays, some useful utility functions and other such pitchifkes.
            </summary>
    </member>
    <member name="M:JewishCalendar.Utils.#cctor">
      <summary>
            static constructor
            </summary>
    </member>
    <member name="F:JewishCalendar.Utils.DaysOfWeek">
      <summary>
            The Jewish names for the days of the week in English as an array. For example, DaysOfWeek[5] is Erev Shabbos
            </summary>
    </member>
    <member name="F:JewishCalendar.Utils.HebrewCalendar">
      <summary>
            A .NET Hebrew calendar.
            IMPORTANT NOTE: For using this file with a .NET Micro Framework project, the following must be removed.
            </summary>
    </member>
    <member name="F:JewishCalendar.Utils.HebrewCultureInfo">
      <summary>
            The hebrew culture info
            </summary>
    </member>
    <member name="F:JewishCalendar.Utils.JewishDOWNames">
      <summary>
            Names of days of week in Hebrew. יום ראשון is JewishDOWNames[0].
            </summary>
    </member>
    <member name="F:JewishCalendar.Utils.JewishMonthNamesEnglish">
      <summary>
            Array of name of the Jewish Months. Month numbers correspond to the array index, so  Nissan is JewishMonthNamesEnglish[1] etc.
            </summary>
    </member>
    <member name="F:JewishCalendar.Utils.JewishMonthNamesHebrew">
      <summary>
            Array of Hebrew names of the Jewish Months. Month numbers correspond to the array index, so  ניסן is JewishMonthNamesHebrew[1] etc.
            </summary>
    </member>
    <member name="M:JewishCalendar.Utils.GetOmerNusach(System.Int32,System.Boolean,System.Boolean)">
      <summary>
            Returns the nusach for Sefiras Ha'omer for the given day and minhag
            </summary>
      <param name="dayOfOmer">The day of the Omer for which to get the nusach for</param>
      <param name="laOmer">Should it be La'Omer (Nusach Sefard) or Ba'Omer (Nusach Ashkenaz)?</param>
      <param name="sfardi">Should the Nusach be the Sfardi Nusach (Eidot Hamizrach) or the Ashkenazi one (Nusach Sefard and Ashkenaz)?</param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Utils.In(System.Object,System.Object[])">
      <summary>
            Determine if this object is contained in a list of objects
            </summary>
      <param name="obj">The object to test</param>
      <param name="list">Any number of parameters which together make up the list of objects to look through</param>
      <returns>True; if the item is in the parameter list. Otherwise, False</returns>
    </member>
    <member name="M:JewishCalendar.Utils.IsSpecialDayType(JewishCalendar.SpecialDayTypes,JewishCalendar.SpecialDayTypes)">
      <summary>
            Determine if the given SpecialDayType contains the given type. Equivalent to Enum.HasFlag.
            </summary>
      <param name="specialDayType">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Utils.IsDateTimeDST(System.DateTime,JewishCalendar.Location)">
      <summary>
            Determines if the given Gregorian date and time is within the rules for DST.
            If no time zone info is available; if the location is in Israel, the current Israeli rules are used.
            Otherwise, the local system rules are used. [This may be very incorrect if the user is viewing any other location but the local system one]
            </summary>
      <param name="date">The secular date</param>
      <param name="location">Where in the world?</param>
      <returns>True if the given date and time is DST for the given location, otherwise False.</returns>
    </member>
    <member name="M:JewishCalendar.Utils.ToNumberHeb(System.Int32)">
      <summary>
            Converts a number into its Jewish number equivalent. I.E. 254 is רכ"ד
            NOTE: The exact thousands numbers (1000, 2000, 3000 etc.)
            will look awfully similar to the single digits, but will be formatted with a double apostrophe I.E. 2000 = "''ב"
            </summary>
      <param name="number">The number to convert</param>
      <returns>A Hebrew string representation of the number</returns>
    </member>
    <member name="M:JewishCalendar.Utils.ToSuffixedString(System.Int32)">
      <summary>
            Add two character suffix to number. e.g. 21st, 102nd, 93rd, 500th
            </summary>
      <param name="num">The number to add the suffix to</param>
      <returns>A string representation of the number as a sequence item</returns>
    </member>
    <member name="M:JewishCalendar.Utils.GetProperMonthName(System.Int32,System.Int32)">
      <summary>
            Gets the "proper" name for the given Jewish Month.
            This means for a leap year, labeling each of the the 2 Adars.
            </summary>
      <param name="jYear">
      </param>
      <param name="jMonth">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Utils.GetProperMonthNameHeb(System.Int32,System.Int32)">
      <summary>
            Gets the "proper" name in Hebrew for the given Jewish Month.
            This means for a leap year, labeling each of the the 2 Adars.
            </summary>
      <param name="jYear">
      </param>
      <param name="jMonth">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:JewishCalendar.Utils.getDOW(System.Int32,System.Int32,System.Int32)">
      <summary>
            Get day of week using Zellers algorithm.
            </summary>
      <remarks>Day zero is Sunday</remarks>
      <param name="year">The secular year</param>
      <param name="month">The secular month</param>
      <param name="day">The secular day</param>
      <returns>The day of week index. Sunday is 0.</returns>
    </member>
    <member name="M:JewishCalendar.Utils.IsIsraelDst(System.DateTime)">
      <summary>
            Determine if the given secular date and time is during Daylight Savings Time using the (current [2015]) Israeli rules.
            </summary>
      <param name="date">The given date and time</param>
      <returns>Whether or not the given DateTime is during Daylight Savings Time</returns>
    </member>
    <member name="M:JewishCalendar.Utils.IsUsaDst(System.DateTime)">
      <summary>
            Determine if the given secular date and time is during Daylight Savings Time using the USA rules.
            </summary>
      <param name="date">The given date and time</param>
      <returns>Whether or not the given DateTime is during Daylight Savings Time</returns>
    </member>
    <member name="N:JewishCalendar">
      <summary>Contains classes for the Jewish Calendar</summary>
    </member>
  </members>
</doc>